import 'package:cloud_firestore/cloud_firestore.dart';

// Represents a Course created by a lecturer
class Course {
  final String id; // Firestore Document ID (auto-generated by Firestore)
  final String name;
  final String code;
  final String lecturerId; // UID of the lecturer who created the course
  final String lecturerName;
  final String time; // e.g., "09:00 - 10:00"
  final String dayOfWeek; // e.g., "Monday", "Tuesday", etc. (for timetable)
  final String? room; // Optional room number for physical classes
  final double? locationLat; // Latitude for physical location
  final double? locationLng; // Longitude for physical location
  final bool isOnline; // true if online class, false if physical
  final List<String> enrolledStudentIds; // List of student UIDs enrolled in this course

  Course({
    required this.id,
    required this.name,
    required this.code,
    required this.lecturerId,
    required this.lecturerName,
    required this.time,
    required this.dayOfWeek,
    this.room,
    this.locationLat,
    this.locationLng,
    this.isOnline = false,
    this.enrolledStudentIds = const [],
  });

  // Factory constructor for creating a Course from a Firestore DocumentSnapshot
  factory Course.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return Course(
      id: doc.id,
      name: data['name'] ?? '',
      code: data['code'] ?? '',
      lecturerId: data['lecturerId'] ?? '',
      lecturerName: data['lecturerName'] ?? '',
      time: data['time'] ?? '',
      dayOfWeek: data['dayOfWeek'] ?? '',
      room: data['room'],
      locationLat: (data['locationLat'] as num?)?.toDouble(),
      locationLng: (data['locationLng'] as num?)?.toDouble(),
      isOnline: data['isOnline'] ?? false,
      enrolledStudentIds: List<String>.from(data['enrolledStudentIds'] ?? []),
    );
  }

  // Convert a Course object to a Map for Firestore
  Map<String, dynamic> toFirestore() {
    return {
      'name': name,
      'code': code,
      'lecturerId': lecturerId,
      'lecturerName': lecturerName,
      'time': time,
      'dayOfWeek': dayOfWeek,
      'room': room,
      'locationLat': locationLat,
      'locationLng': locationLng,
      'isOnline': isOnline,
      'enrolledStudentIds': enrolledStudentIds,
    };
  }
}

// Represents a user (lecturer or student) stored in Firestore, regardless of login role logic.
// We still need this to fetch user names and IDs.
class AppUser {
  final String id; // Firebase Auth UID (Document ID in 'users' collection)
  final String email;
  final String name;
  final String role; // 'lecturer' or 'student' - important for filtering students/lecturers
  final String? studentId; // Optional: specific student ID if different from Auth UID

  AppUser({
    required this.id,
    required this.email,
    required this.name,
    required this.role,
    this.studentId,
  });

  factory AppUser.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return AppUser(
      id: doc.id,
      email: data['email'] ?? '',
      name: data['name'] ?? '',
      role: data['role'] ?? '',
      studentId: data['studentId'],
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'email': email,
      'name': name,
      'role': role,
      'studentId': studentId, // Null if not a student
    };
  }
}

// Represents a single attendance record for a student in a course for a specific session
enum AttendanceStatus {
  attended,
  absent,
  pending, // For offline check-ins or unconfirmed records
}

class AttendanceRecord {
  final String id; // Firestore Document ID for the attendance record
  final String courseId; // The ID of the course
  final String courseName;
  final String studentId; // The Firebase Auth UID of the student
  final String studentName;
  final DateTime timestamp; // The date and time of the attendance record (e.g., when class happened)
  final AttendanceStatus status;
  final String recordedBy; // 'system', 'lecturer', 'student'
  final String? checkInQrCode; // The QR code string used for check-in
  final DateTime? qrGeneratedTime; // When the QR code was generated (for expiration)
  final double? studentCheckInLat; // Student's latitude at check-in
  final double? studentCheckInLng; // Student's longitude at check-in
  final double? courseLocationLat; // Course's specified latitude
  final double? courseLocationLng; // Course's specified longitude
  final bool? isOnlineClass; // Whether it was an online class session

  AttendanceRecord({
    required this.id,
    required this.courseId,
    required this.courseName,
    required this.studentId,
    required this.studentName,
    required this.timestamp,
    required this.status,
    this.recordedBy = 'system',
    this.checkInQrCode,
    this.qrGeneratedTime,
    this.studentCheckInLat,
    this.studentCheckInLng,
    this.courseLocationLat,
    this.courseLocationLng,
    this.isOnlineClass,
  });

  factory AttendanceRecord.fromFirestore(DocumentSnapshot doc) {
    Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
    return AttendanceRecord(
      id: doc.id,
      courseId: data['courseId'] ?? '',
      courseName: data['courseName'] ?? '',
      studentId: data['studentId'] ?? '',
      studentName: data['studentName'] ?? '',
      timestamp: (data['timestamp'] as Timestamp).toDate(),
      status: _parseAttendanceStatus(data['status']),
      recordedBy: data['recordedBy'] ?? 'system',
      checkInQrCode: data['checkInQrCode'],
      qrGeneratedTime: (data['qrGeneratedTime'] as Timestamp?)?.toDate(),
      studentCheckInLat: (data['studentCheckInLat'] as num?)?.toDouble(),
      studentCheckInLng: (data['studentCheckInLng'] as num?)?.toDouble(),
      courseLocationLat: (data['courseLocationLat'] as num?)?.toDouble(),
      courseLocationLng: (data['courseLocationLng'] as num?)?.toDouble(),
      isOnlineClass: data['isOnlineClass'],
    );
  }

  Map<String, dynamic> toFirestore() {
    return {
      'courseId': courseId,
      'courseName': courseName,
      'studentId': studentId,
      'studentName': studentName,
      'timestamp': Timestamp.fromDate(timestamp),
      'status': status.toString().split('.').last, // Store enum as string
      'recordedBy': recordedBy,
      'checkInQrCode': checkInQrCode,
      'qrGeneratedTime': qrGeneratedTime != null ? Timestamp.fromDate(qrGeneratedTime!) : null,
      'studentCheckInLat': studentCheckInLat,
      'studentCheckInLng': studentCheckInLng,
      'courseLocationLat': courseLocationLat,
      'courseLocationLng': courseLocationLng,
      'isOnlineClass': isOnlineClass,
    };
  }

  static AttendanceStatus _parseAttendanceStatus(String? statusString) {
    switch (statusString) {
      case 'attended':
        return AttendanceStatus.attended;
      case 'absent':
        return AttendanceStatus.absent;
      case 'pending':
        return AttendanceStatus.pending;
      default:
        return AttendanceStatus.absent; // Default to absent if status is unknown/null
    }
  }
}